/*
 * SourceApi
 *
 * A Web API for controlling a source.
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// VeinApiController binds http requests to an api service and writes the service results to the http response
type VeinApiController struct {
	service      VeinAPIServicer
	errorHandler ErrorHandler
}

// VeinApiOption for how the controller is set up.
type VeinApiOption func(*VeinApiController)

// WithVeinApiErrorHandler inject ErrorHandler into controller
func WithVeinApiErrorHandler(h ErrorHandler) VeinApiOption {
	return func(c *VeinApiController) {
		c.errorHandler = h
	}
}

// NewVeinApiController creates a default api controller
func NewVeinAPIController(s VeinAPIServicer, opts ...VeinApiOption) Router {
	controller := &VeinApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VeinApiController
func (c *VeinApiController) Routes() Routes {
	return Routes{
		"ApiV1VeinGetInfoPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/Vein/GetInfo",
			c.ApiV1VeinGetInfoPost,
		},
		"ApiV1VeinSetInfoPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/Vein/SetInfo",
			c.ApiV1VeinSetInfoPost,
		},
	}
}

// ApiV1VeinGetInfoPost - Gets information from Vein.
func (c *VeinApiController) ApiV1VeinGetInfoPost(w http.ResponseWriter, r *http.Request) {
	veinGetParam := VeinGet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&veinGetParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVeinGetRequired(veinGetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1VeinGetInfoPost(r.Context(), veinGetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ApiV1VeinSetInfoPost - Sets information to Vein.
func (c *VeinApiController) ApiV1VeinSetInfoPost(w http.ResponseWriter, r *http.Request) {
	veinSetParam := VeinSet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&veinSetParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVeinSetRequired(veinSetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1VeinSetInfoPost(r.Context(), veinSetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
