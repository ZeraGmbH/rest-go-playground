/*
 * SourceApi
 *
 * A Web API for controlling a source.
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ProblemDetails struct {

	Type *string `json:"type,omitempty"`

	Title *string `json:"title,omitempty"`

	Status *int32 `json:"status,omitempty"`

	Detail *string `json:"detail,omitempty"`

	Instance *string `json:"instance,omitempty"`
}

// AssertProblemDetailsRequired checks if the required fields are not zero-ed
func AssertProblemDetailsRequired(obj ProblemDetails) error {
	return nil
}

// AssertRecurseProblemDetailsRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ProblemDetails (e.g. [][]ProblemDetails), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseProblemDetailsRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aProblemDetails, ok := obj.(ProblemDetails)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertProblemDetailsRequired(aProblemDetails)
	})
}
